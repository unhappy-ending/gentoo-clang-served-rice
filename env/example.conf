# ${CN}/${PN}
#  configure phase fails with
#  compile phase fails with
#  test phase fails with
#  install phase fails with
###############################################################################
CFLAGS="-march=native -O3 -pipe"
CFLAGS="${CFLAGS} -fcf-protection=none"
CFLAGS="${CFLAGS} -fdata-sections"
CFLAGS="${CFLAGS} -fdirect-access-external-data"
CFLAGS="${CFLAGS} -ffast-math"
CFLAGS="${CFLAGS} -fforce-emit-vtables"
CFLAGS="${CFLAGS} -ffp-contract=fast"
CFLAGS="${CFLAGS} -ffunction-sections"
CFLAGS="${CFLAGS} -flto"
CFLAGS="${CFLAGS} -fno-common"
CFLAGS="${CFLAGS} -fno-PIE"
CFLAGS="${CFLAGS} -fno-plt"
CFLAGS="${CFLAGS} -fno-sanitize=all"
CFLAGS="${CFLAGS} -fno-semantic-interposition"
CFLAGS="${CFLAGS} -fno-stack-protector"
CFLAGS="${CFLAGS} -fstrict-vtable-pointers"
CFLAGS="${CFLAGS} -fveclib=libmvec"
CFLAGS="${CFLAGS} -fvirtual-function-elimination"
CFLAGS="${CFLAGS} -fwhole-program-vtables"
#CFLAGS="${CFLAGS} -mllvm -polly"
#CFLAGS="${CFLAGS} -mllvm -polly-vectorizer=stripmine"
CXXFLAGS="${CFLAGS}"
CXXFLAGS="${CFLAGS} -fvisibility-inlines-hidden"
LDFLAGS=""
LDFLAGS="${LDFLAGS} -no-pie"
LDFLAGS="${LDFLAGS} -Wl,-Bsymbolic-functions"
LDFLAGS="${LDFLAGS} -Wl,-no-pie"
LDFLAGS="${LDFLAGS} -Wl,-O2"
LDFLAGS="${LDFLAGS} -Wl,-z,now"
LDFLAGS="${LDFLAGS} -Wl,-z,relro"
LDFLAGS="${LDFLAGS} -Wl,--as-needed"
LDFLAGS="${LDFLAGS} -Wl,--gc-sections"
LDFLAGS="${LDFLAGS} -Wl,--icf=all"
LDFLAGS="${LDFLAGS} -Wl,--lto-O3"
LDFLAGS="${LDFLAGS} -Wl,--lto-whole-program-visibility"

# sandboxing
FEATURES="${FEATURES} -network-sandbox -pid-sandbox -sandbox -usersandbox"

# testing
FEATURES="${FEATURES} -test"

# workarounds
CFLAGS="${CFLAGS} -fPIC"
CFLAGS="${CFLAGS} -ftrapping-math"
LDFLAGS="${LDFLAGS} -fuse-ld=bfd"
LDFLAGS="${LDFLAGS} -rtlib=libgcc -unwindlib=libgcc"
LDFLAGS="${LDFLAGS} -stdlib=libstdc++"
LDFLAGS="${LDFLAGS} -Xcompiler -fuse-ld=lld"
_FLAG_O_MATIC_ECLASS=1

# copy & pase from here for gcc+mold
###############################################################################
CC="gcc"
CPP="cpp"
CXX="g++"
CFLAGS="-march=native -O3 -pipe"
CFLAGS="${CFLAGS} -fcf-protection=none"
CFLAGS="${CFLAGS} -fdata-sections"
CFLAGS="${CFLAGS} -fdevirtualize-at-ltrans"
CFLAGS="${CFLAGS} -ffast-math"
CFLAGS="${CFLAGS} -ffunction-sections"
CFLAGS="${CFLAGS} -fgraphite-identity"
CFLAGS="${CFLAGS} -fipa-pta"
CFLAGS="${CFLAGS} -floop-nest-optimize"
CFLAGS="${CFLAGS} -floop-parallelize-all"
CFLAGS="${CFLAGS} -flto"
CFLAGS="${CFLAGS} -flto-compression-level=19"
CFLAGS="${CFLAGS} -fno-common"
CFLAGS="${CFLAGS} -fno-PIE"
CFLAGS="${CFLAGS} -fno-plt"
CFLAGS="${CFLAGS} -fno-sanitize=all"
CFLAGS="${CFLAGS} -fno-semantic-interposition"
CFLAGS="${CFLAGS} -fno-stack-protector"
CFLAGS="${CFLAGS} -fno-trapping-math"
CFLAGS="${CFLAGS} -fuse-linker-plugin"
CXXFLAGS="${CFLAGS}"
CXXFLAGS="${CFLAGS} -fvisibility-inlines-hidden"
LDFLAGS="-fuse-ld=llld"
LDFLAGS="${LDFLAGS} -no-pie"
LDFLAGS="${LDFLAGS} -Wl,-Bsymbolic-functions"
LDFLAGS="${LDFLAGS} -Wl,-no-pie"
LDFLAGS="${LDFLAGS} -Wl,-O2"
LDFLAGS="${LDFLAGS} -Wl,-z,now"
LDFLAGS="${LDFLAGS} -Wl,-z,relro"
LDFLAGS="${LDFLAGS} -Wl,--as-needed"
LDFLAGS="${LDFLAGS} -Wl,--gc-sections"
LDFLAGS="${LDFLAGS} -Wl,--icf=all"

# LLVM libc++
CXXFLAGS="${CXXFLAGS} -nostdinc++ -I/usr/include/c++/v1"

# LLVM libc++
LDFLAGS="${LDFLAGS} -nodefaultlibs -lc++ -lc++abi -lc -lgcc -lgcc_s -lm"

# sandboxing
FEATURES="${FEATURES} -network-sandbox -pid-sandbox -sandbox -usersandbox"

# testing
FEATURES="${FEATURES} -test"
