# Toolchain overrides. This section defines LLVM alternatives to GNU binutils
# for a complete LLVM toolchain. This may help when using Clang since the LLVM
# toolchain is more aware of Clang specific optimizations and features.

# Address translator
#
#  This replaces GNU binutils' addr2line.
#
ADDR2LINE="llvm-addr2line"

# Archiver
#
#  This replaces GNU binutils' ar. You can control its behavior with ARFLAGS,
#  but only if it's directly called.
#
AR="llvm-ar"

# Assembler
#
#  This replaces GNU binutils' as. Kind of.
#
AS="llvm-as"

# Linker
#
#  This replaces GNU binutils' dynamic linker. You can control its behavior
#  with LDFLAGS when indirectly called via the compiler. This only reports the
#  name of the linker being used, not forcing lld over bfd. Since we set LLD as
#  the Clang default with USE flags, this will output the proper linker used
#  during configure phase checks.
#
LD="ld.lld"

# Symbol extractor
#
#  This replaces GNU binutils' nm.
#
NM="llvm-nm"

# Object copier and translater
#
#  This replaces GNU binutils' objcopy.
#
OBJCOPY="llvm-objcopy"

# Object file dumper
#
#  This replaces GNU binutils' objdump.
#
OBJDUMP="llvm-objdump"

# Archive index generator
#
#  This replaces GNU binutils' ranlib.
#
RANLIB="llvm-ranlib"

# Object reader
#
#  This replaces GNU binutils' readelf.
#
READELF="llvm-readelf"

# Strings printer
#
#  This replaces GNU binutils' strings.
#
STRINGS="llvm-strings"

# Object stripping tool
#
#  This replaces GNU binutils' strip.
#
STRIP="llvm-strip"
