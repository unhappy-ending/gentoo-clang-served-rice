# These are our default C flags. CPU optimizations, optimization level, and
# memory piping.
	CFLAGS="-march=znver2 -O3 -pipe"

# Disable code flow integrity protection. CFI is a set of features which are
# designed to abort the program upon detecting certain forms of undefined
# behavior that can potentially allow attackers to subvert the programâ€™s
# control flow. This causes a slight performance overhead and increases code
# size.
	CFLAGS="${CFLAGS} -fcf-protection=none"

# Create sections for data and allow the linker to mark sections as not needed.
# Code marked as unnecessary data can be removed with Wl,--gc-sections which
# can drastically reduce code size.
	CFLAGS="${CFLAGS} -fdata-sections"

# Use direct access relocations instead of GOT to reference external data
# symbols. This is similar behavior to static code. Gentoo compiles shared code
# by default so we want to bypass GOT/PLT as much as possible.
	CFLAGS="${CFLAGS} -fdirect-access-external-data"

# Break C standards in favor of ricing. It allows the compiler to take math
# shortcuts at the expense of accuracy, allowing code to execute less
# calculations resulting in faster execution. Disable it for packages that
# require accurate math.
	CFLAGS="${CFLAGS} -ffast-math"

# Form fused floating-point operations. Clang's default is set to on for most
# code, fast for CUDA code, and fast-honor-pragmas for HIP code. This changes
# Clang's -ffp-contract behavior to fast which is the default behavior in GCC.
# This option is turned on with -ffast-math, but having it always enabled will
# allow it to be used when -ffast-math can't be used..
	CFLAGS="${CFLAGS} -ffp-contract=fast"

# Creates sections for fuctions and allow the linker to mark sections as not
# needed. Code marked as unnecessary functions can be removed with
# -Wl,--gc-sections which can drastically reduce code size.
	CFLAGS="${CFLAGS} -ffunction-sections"

# Optimize code at link-time rather than compile time. There are two methods
# for LTO: full and thin. Thin runs parallel and is more memory efficient. Full
# is slower since it isn't parallel, but has better code visibility. In order
# to take full advantage of devirtualization, it's recommended to use full LTO.
	CFLAGS="${CFLAGS} -flto"

# Variables without initializers won't have common linkage. Common linkage
# implies a speed and size penalty.
	CFLAGS="${CFLAGS} -fno-common"

# Use GOT indirection instead of PLT to make external function calls. This
# leads to more efficient code by eliminating PLT stubs and exposing GOT loads
# to optimizations.
	CFLAGS="${CFLAGS} -fno-plt"

# Sanitizers cause memory and CPU overhead that we don't want. This turns off
# any sanitizers in case any are turned on by default. You can't turn them all
# on at once, but you can disable them all at once with this mighty flag.
	CFLAGS="${CFLAGS} -fno-sanitize=all"

# For shared code ELF allows interposing of symbols by the dynamic linker. This
# means that for symbols exported from the DSO, the compiler cannot perform
# interprocedural propagation, inlining and other optimizations. This returns
# some of the performance that PIC/PIE has stolen.
	CFLAGS="${CFLAGS} -fno-semantic-interposition"

# Stack smashing protection helps the compiler detect stack buffer overflows.
# The extra checks cause extra overhead so off with their heads.
	CFLAGS="${CFLAGS} -fno-stack-protector"
