# Use LLVM's LLD linker over GNU Binutils' BFD linker. It's faster, has more
# features and optimizations, and integrates better with Clang than BFD does.
# Fall back to BFD by changing the string to bfd or unsetting the flag if
# clang-common[default-lld] hasn't been set.
	LDFLAGS="-fuse-ld=lld"

# Use Clang's compiler-rt runtime libraries instead of GCC's libgcc runtime
# library. Fall back to the GCC runtime by changing the string to libgcc
# or unsetting the flag if clang-common[default-compiler-rt] hasn't been set.
	LDFLAGS="${LDFLAGS} -rtlib=compiler-rt"

# Use LLVM's libunwind instead of GCC's libgcc.
	LDFLAGS="${LDFLAGS} -unwindlib=libunwind"

# Sets DT_NEEDED for shared libraries. If libraries aren't needed during
# link-time, the linker skips them saving code size and unnecessary executions.
	LDFLAGS="${LDFLAGS} -Wl,--as-needed"

# Collect garbage during link-time, removing unused symbols that can bloat the
# code. This helps keep code size smaller and more memory efficient.
	LDFLAGS="${LDFLAGS} -Wl,--gc-sections"

# Fold identical code during link-time. This helps keep code size smaller and
# memory efficient. There are three levels: none, safe, and all. If all causes
# failures, try safe, and then try disabling the flag.
	LDFLAGS="${LDFLAGS} -Wl,--icf=all"

# Sets the linker optimization pipeline level during link-time. There are 4
# levels: level 0, level 1, level 2, and level 3. This option adds more passes
# and makes some passes more aggressive.
	LDFLAGS="${LDFLAGS} -Wl,--lto-O3"

# Asserts that the link-time optimization link has whole program visibility.
	LDFLAGS="${LDFLAGS} -Wl,--lto-whole-program-visibility"

# Sets the amount of threads the linker can use. By default, LLD already runs
# in threaded mode equal to the amount of processor cores available. Use the
# --threads flag to limit the linker's thread count.
	LDFLAGS="${LDFLAGS} -Wl,--threads=8"

# Use zlib to compress the final code output. There are 2 useful levels: level
# 1 and level 2. Level 0 obviously disables size optimization. Level 1 is
# fastest compression and level 2 is high compression equal to zlib level 6.
	LDFLAGS="${LDFLAGS} -Wl,-O2"

# Changes the default linker behavior from lazy to eager binding. This makes
# the code resolve all symbols at load.
	LDFLAGS="${LDFLAGS} -Wl,-z,now"

# Force relocation read-only. Define it here in case some builds try to
# override it.
	LDFLAGS="${LDFLAGS} -Wl,-z,relro"
