# Bind default visibility defined symbols (or functions) locally for shared
# code. Use -Wl,-Bsymbolic-non-weak-functions when this causes issues.
#
LDFLAGS="-Wl,-Bsymbolic-functions"

# Use zlib to compress the final code output. There are 2 useful levels: level
# 1 and level 2. Level 0 obviously disables size optimization. Level 1 is
# fastest compression and level 2 is high compression equal to zlib level 6.
#
LDFLAGS="${LDFLAGS} -Wl,-O2"

# Changes the default linker behavior from lazy to eager binding. This makes
# the code resolve all symbols at load.
#
LDFLAGS="${LDFLAGS} -Wl,-z,now"

# Force relocation read-only. Define it here in case some builds try to
# override it.
#
LDFLAGS="${LDFLAGS} -Wl,-z,relro"

# Sets DT_NEEDED for shared libraries. If libraries aren't needed during
# link-time, the linker skips them saving code size and unnecessary executions.
#
LDFLAGS="${LDFLAGS} -Wl,--as-needed"

# Collect garbage during link-time, removing unused symbols that can bloat the
# code. This helps keep code size smaller and more memory efficient.
#
LDFLAGS="${LDFLAGS} -Wl,--gc-sections"

# Fold identical code during link-time. This helps keep code size smaller and
# memory efficient. There are three levels: none, safe, and all. If all causes
# failures, try safe, and then try disabling the flag.
#
LDFLAGS="${LDFLAGS} -Wl,--icf=all"

# Sets the linker optimization pipeline level during link-time. There are 4
# levels: level 0, level 1, level 2, and level 3. Level 3 is the maximum level,
# you can't rice beyond it. This option adds more passes and makes some passes
# more aggressive.
#
LDFLAGS="${LDFLAGS} -Wl,--lto-O3"
